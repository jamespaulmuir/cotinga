<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Community', 'doctrine');

/**
 * BaseCommunity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $community_id
 * @property string $name
 * @property string $short_description
 * @property string $introductory_text
 * @property integer $logo_bitstream_id
 * @property string $copyright_text
 * @property string $side_bar_text
 * @property integer $admin
 * @property Bitstream $LogoBitstream
 * @property Epersongroup $Epersongroup
 * @property Doctrine_Collection $Collections
 * @property Doctrine_Collection $ParentCommunities
 * @property Doctrine_Collection $ChildCommunities
 * @property Doctrine_Collection $CommunityItemCounts
 * @property Doctrine_Collection $Items
 * @property Doctrine_Collection $Communities2item
 * @property Doctrine_Collection $Community2collection
 * @property Doctrine_Collection $Community2community
 * 
 * @method integer             getCommunityId()          Returns the current record's "community_id" value
 * @method string              getName()                 Returns the current record's "name" value
 * @method string              getShortDescription()     Returns the current record's "short_description" value
 * @method string              getIntroductoryText()     Returns the current record's "introductory_text" value
 * @method integer             getLogoBitstreamId()      Returns the current record's "logo_bitstream_id" value
 * @method string              getCopyrightText()        Returns the current record's "copyright_text" value
 * @method string              getSideBarText()          Returns the current record's "side_bar_text" value
 * @method integer             getAdmin()                Returns the current record's "admin" value
 * @method Bitstream           getLogoBitstream()        Returns the current record's "LogoBitstream" value
 * @method Epersongroup        getEpersongroup()         Returns the current record's "Epersongroup" value
 * @method Doctrine_Collection getCollections()          Returns the current record's "Collections" collection
 * @method Doctrine_Collection getParentCommunities()    Returns the current record's "ParentCommunities" collection
 * @method Doctrine_Collection getChildCommunities()     Returns the current record's "ChildCommunities" collection
 * @method Doctrine_Collection getCommunityItemCounts()  Returns the current record's "CommunityItemCounts" collection
 * @method Doctrine_Collection getItems()                Returns the current record's "Items" collection
 * @method Doctrine_Collection getCommunities2item()     Returns the current record's "Communities2item" collection
 * @method Doctrine_Collection getCommunity2collection() Returns the current record's "Community2collection" collection
 * @method Doctrine_Collection getCommunity2community()  Returns the current record's "Community2community" collection
 * @method Community           setCommunityId()          Sets the current record's "community_id" value
 * @method Community           setName()                 Sets the current record's "name" value
 * @method Community           setShortDescription()     Sets the current record's "short_description" value
 * @method Community           setIntroductoryText()     Sets the current record's "introductory_text" value
 * @method Community           setLogoBitstreamId()      Sets the current record's "logo_bitstream_id" value
 * @method Community           setCopyrightText()        Sets the current record's "copyright_text" value
 * @method Community           setSideBarText()          Sets the current record's "side_bar_text" value
 * @method Community           setAdmin()                Sets the current record's "admin" value
 * @method Community           setLogoBitstream()        Sets the current record's "LogoBitstream" value
 * @method Community           setEpersongroup()         Sets the current record's "Epersongroup" value
 * @method Community           setCollections()          Sets the current record's "Collections" collection
 * @method Community           setParentCommunities()    Sets the current record's "ParentCommunities" collection
 * @method Community           setChildCommunities()     Sets the current record's "ChildCommunities" collection
 * @method Community           setCommunityItemCounts()  Sets the current record's "CommunityItemCounts" collection
 * @method Community           setItems()                Sets the current record's "Items" collection
 * @method Community           setCommunities2item()     Sets the current record's "Communities2item" collection
 * @method Community           setCommunity2collection() Sets the current record's "Community2collection" collection
 * @method Community           setCommunity2community()  Sets the current record's "Community2community" collection
 * 
 * @package    dspace
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCommunity extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('public.community');
        $this->hasColumn('community_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('short_description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('introductory_text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('logo_bitstream_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('copyright_text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('side_bar_text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('admin', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Bitstream as LogoBitstream', array(
             'local' => 'logo_bitstream_id',
             'foreign' => 'bitstream_id'));

        $this->hasOne('Epersongroup', array(
             'local' => 'admin',
             'foreign' => 'eperson_group_id'));

        $this->hasMany('Collection as Collections', array(
             'refClass' => 'Community2collection',
             'local' => 'community_id',
             'foreign' => 'collection_id'));

        $this->hasMany('Community as ParentCommunities', array(
             'refClass' => 'Community2community',
             'local' => 'child_comm_id',
             'foreign' => 'parent_comm_id'));

        $this->hasMany('Community as ChildCommunities', array(
             'refClass' => 'Community2community',
             'local' => 'parent_comm_id',
             'foreign' => 'child_comm_id'));

        $this->hasMany('CommunityItemCount as CommunityItemCounts', array(
             'local' => 'community_id',
             'foreign' => 'community_id'));

        $this->hasMany('Item as Items', array(
             'refClass' => 'Communities2item',
             'local' => 'community_id',
             'foreign' => 'item_id'));

        $this->hasMany('Communities2item', array(
             'local' => 'community_id',
             'foreign' => 'community_id'));

        $this->hasMany('Community2collection', array(
             'local' => 'community_id',
             'foreign' => 'community_id'));

        $this->hasMany('Community2community', array(
             'local' => 'community_id',
             'foreign' => 'parent_comm_id'));
    }
}