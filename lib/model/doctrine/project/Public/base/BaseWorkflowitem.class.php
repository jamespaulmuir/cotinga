<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Workflowitem', 'doctrine');

/**
 * BaseWorkflowitem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $workflow_id
 * @property integer $item_id
 * @property integer $collection_id
 * @property integer $state
 * @property integer $owner
 * @property boolean $multiple_titles
 * @property boolean $published_before
 * @property boolean $multiple_files
 * @property Item $Item
 * @property Collection $Collection
 * @property Eperson $Eperson
 * @property Doctrine_Collection $Tasklistitems
 * 
 * @method integer             getWorkflowId()       Returns the current record's "workflow_id" value
 * @method integer             getItemId()           Returns the current record's "item_id" value
 * @method integer             getCollectionId()     Returns the current record's "collection_id" value
 * @method integer             getState()            Returns the current record's "state" value
 * @method integer             getOwner()            Returns the current record's "owner" value
 * @method boolean             getMultipleTitles()   Returns the current record's "multiple_titles" value
 * @method boolean             getPublishedBefore()  Returns the current record's "published_before" value
 * @method boolean             getMultipleFiles()    Returns the current record's "multiple_files" value
 * @method Item                getItem()             Returns the current record's "Item" value
 * @method Collection          getCollection()       Returns the current record's "Collection" value
 * @method Eperson             getEperson()          Returns the current record's "Eperson" value
 * @method Doctrine_Collection getTasklistitems()    Returns the current record's "Tasklistitems" collection
 * @method Workflowitem        setWorkflowId()       Sets the current record's "workflow_id" value
 * @method Workflowitem        setItemId()           Sets the current record's "item_id" value
 * @method Workflowitem        setCollectionId()     Sets the current record's "collection_id" value
 * @method Workflowitem        setState()            Sets the current record's "state" value
 * @method Workflowitem        setOwner()            Sets the current record's "owner" value
 * @method Workflowitem        setMultipleTitles()   Sets the current record's "multiple_titles" value
 * @method Workflowitem        setPublishedBefore()  Sets the current record's "published_before" value
 * @method Workflowitem        setMultipleFiles()    Sets the current record's "multiple_files" value
 * @method Workflowitem        setItem()             Sets the current record's "Item" value
 * @method Workflowitem        setCollection()       Sets the current record's "Collection" value
 * @method Workflowitem        setEperson()          Sets the current record's "Eperson" value
 * @method Workflowitem        setTasklistitems()    Sets the current record's "Tasklistitems" collection
 * 
 * @package    dspace
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseWorkflowitem extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('public.workflowitem');
        $this->hasColumn('workflow_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('item_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('collection_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('state', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('owner', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('multiple_titles', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('published_before', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('multiple_files', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Item', array(
             'local' => 'item_id',
             'foreign' => 'item_id'));

        $this->hasOne('Collection', array(
             'local' => 'collection_id',
             'foreign' => 'collection_id'));

        $this->hasOne('Eperson', array(
             'local' => 'owner',
             'foreign' => 'eperson_id'));

        $this->hasMany('Tasklistitem as Tasklistitems', array(
             'local' => 'workflow_id',
             'foreign' => 'workflow_id'));
    }
}