<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Public_Eperson_Item', 'doctrine');

/**
 * BasePublic_Eperson_Item
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $eperson_id
 * @property string $email
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property boolean $can_log_in
 * @property boolean $require_certificate
 * @property boolean $self_registered
 * @property timestamp $last_active
 * @property integer $sub_frequency
 * @property string $phone
 * @property string $netid
 * @property string $language
 * @property Doctrine_Collection $Public_Subscription_Items
 * @property Doctrine_Collection $Public_Resourcepolicy_Items
 * @property Doctrine_Collection $Public_Workflowitem_Items
 * @property Doctrine_Collection $Public_Epersongroup2eperson_Items
 * @property Doctrine_Collection $Public_Tasklistitem_Items
 * @property Doctrine_Collection $Public_Item_Items
 * 
 * @method integer             getEpersonId()                         Returns the current record's "eperson_id" value
 * @method string              getEmail()                             Returns the current record's "email" value
 * @method string              getPassword()                          Returns the current record's "password" value
 * @method string              getFirstname()                         Returns the current record's "firstname" value
 * @method string              getLastname()                          Returns the current record's "lastname" value
 * @method boolean             getCanLogIn()                          Returns the current record's "can_log_in" value
 * @method boolean             getRequireCertificate()                Returns the current record's "require_certificate" value
 * @method boolean             getSelfRegistered()                    Returns the current record's "self_registered" value
 * @method timestamp           getLastActive()                        Returns the current record's "last_active" value
 * @method integer             getSubFrequency()                      Returns the current record's "sub_frequency" value
 * @method string              getPhone()                             Returns the current record's "phone" value
 * @method string              getNetid()                             Returns the current record's "netid" value
 * @method string              getLanguage()                          Returns the current record's "language" value
 * @method Doctrine_Collection getPublicSubscriptionItems()           Returns the current record's "Public_Subscription_Items" collection
 * @method Doctrine_Collection getPublicResourcepolicyItems()         Returns the current record's "Public_Resourcepolicy_Items" collection
 * @method Doctrine_Collection getPublicWorkflowitemItems()           Returns the current record's "Public_Workflowitem_Items" collection
 * @method Doctrine_Collection getPublicEpersongroup2epersonItems()   Returns the current record's "Public_Epersongroup2eperson_Items" collection
 * @method Doctrine_Collection getPublicTasklistitemItems()           Returns the current record's "Public_Tasklistitem_Items" collection
 * @method Doctrine_Collection getPublicItemItems()                   Returns the current record's "Public_Item_Items" collection
 * @method Public_Eperson_Item setEpersonId()                         Sets the current record's "eperson_id" value
 * @method Public_Eperson_Item setEmail()                             Sets the current record's "email" value
 * @method Public_Eperson_Item setPassword()                          Sets the current record's "password" value
 * @method Public_Eperson_Item setFirstname()                         Sets the current record's "firstname" value
 * @method Public_Eperson_Item setLastname()                          Sets the current record's "lastname" value
 * @method Public_Eperson_Item setCanLogIn()                          Sets the current record's "can_log_in" value
 * @method Public_Eperson_Item setRequireCertificate()                Sets the current record's "require_certificate" value
 * @method Public_Eperson_Item setSelfRegistered()                    Sets the current record's "self_registered" value
 * @method Public_Eperson_Item setLastActive()                        Sets the current record's "last_active" value
 * @method Public_Eperson_Item setSubFrequency()                      Sets the current record's "sub_frequency" value
 * @method Public_Eperson_Item setPhone()                             Sets the current record's "phone" value
 * @method Public_Eperson_Item setNetid()                             Sets the current record's "netid" value
 * @method Public_Eperson_Item setLanguage()                          Sets the current record's "language" value
 * @method Public_Eperson_Item setPublicSubscriptionItems()           Sets the current record's "Public_Subscription_Items" collection
 * @method Public_Eperson_Item setPublicResourcepolicyItems()         Sets the current record's "Public_Resourcepolicy_Items" collection
 * @method Public_Eperson_Item setPublicWorkflowitemItems()           Sets the current record's "Public_Workflowitem_Items" collection
 * @method Public_Eperson_Item setPublicEpersongroup2epersonItems()   Sets the current record's "Public_Epersongroup2eperson_Items" collection
 * @method Public_Eperson_Item setPublicTasklistitemItems()           Sets the current record's "Public_Tasklistitem_Items" collection
 * @method Public_Eperson_Item setPublicItemItems()                   Sets the current record's "Public_Item_Items" collection
 * 
 * @package    dspace
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePublic_Eperson_Item extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('public.eperson');
        $this->hasColumn('eperson_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('password', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('firstname', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('lastname', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('can_log_in', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('require_certificate', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('self_registered', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('last_active', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('sub_frequency', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('phone', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('netid', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('language', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Public_Subscription_Item as Public_Subscription_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'eperson_id'));

        $this->hasMany('Public_Resourcepolicy_Item as Public_Resourcepolicy_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'eperson_id'));

        $this->hasMany('Public_Workflowitem_Item as Public_Workflowitem_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'owner'));

        $this->hasMany('Public_Epersongroup2eperson_Item as Public_Epersongroup2eperson_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'eperson_id'));

        $this->hasMany('Public_Tasklistitem_Item as Public_Tasklistitem_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'eperson_id'));

        $this->hasMany('Public_Item_Item as Public_Item_Items', array(
             'local' => 'eperson_id',
             'foreign' => 'submitter_id'));
    }
}